// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        v5.29.3
// source: common-types.proto

package types

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DeviceType int32

const (
	DeviceType_TELTONIKA DeviceType = 0
	DeviceType_WANWAY    DeviceType = 1
	DeviceType_CONCOX    DeviceType = 2
	DeviceType_HOWEN     DeviceType = 3
)

// Enum value maps for DeviceType.
var (
	DeviceType_name = map[int32]string{
		0: "TELTONIKA",
		1: "WANWAY",
		2: "CONCOX",
		3: "HOWEN",
	}
	DeviceType_value = map[string]int32{
		"TELTONIKA": 0,
		"WANWAY":    1,
		"CONCOX":    2,
		"HOWEN":     3,
	}
)

func (x DeviceType) Enum() *DeviceType {
	p := new(DeviceType)
	*p = x
	return p
}

func (x DeviceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_types_proto_enumTypes[0].Descriptor()
}

func (DeviceType) Type() protoreflect.EnumType {
	return &file_common_types_proto_enumTypes[0]
}

func (x DeviceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceType.Descriptor instead.
func (DeviceType) EnumDescriptor() ([]byte, []int) {
	return file_common_types_proto_rawDescGZIP(), []int{0}
}

type DeviceProtocolType int32

const (
	DeviceProtocolType_FM1200  DeviceProtocolType = 0
	DeviceProtocolType_GT06    DeviceProtocolType = 1
	DeviceProtocolType_TR06    DeviceProtocolType = 2
	DeviceProtocolType_HOWENWS DeviceProtocolType = 3
)

// Enum value maps for DeviceProtocolType.
var (
	DeviceProtocolType_name = map[int32]string{
		0: "FM1200",
		1: "GT06",
		2: "TR06",
		3: "HOWENWS",
	}
	DeviceProtocolType_value = map[string]int32{
		"FM1200":  0,
		"GT06":    1,
		"TR06":    2,
		"HOWENWS": 3,
	}
)

func (x DeviceProtocolType) Enum() *DeviceProtocolType {
	p := new(DeviceProtocolType)
	*p = x
	return p
}

func (x DeviceProtocolType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceProtocolType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_types_proto_enumTypes[1].Descriptor()
}

func (DeviceProtocolType) Type() protoreflect.EnumType {
	return &file_common_types_proto_enumTypes[1]
}

func (x DeviceProtocolType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceProtocolType.Descriptor instead.
func (DeviceProtocolType) EnumDescriptor() ([]byte, []int) {
	return file_common_types_proto_rawDescGZIP(), []int{1}
}

type DeviceStatus struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Imei               string                 `protobuf:"bytes,1,opt,name=imei,proto3" json:"imei,omitempty"`
	DeviceType         DeviceType             `protobuf:"varint,2,opt,name=device_type,json=deviceType,proto3,enum=types.DeviceType" json:"device_type,omitempty"`
	Timestamp          *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	MessageType        string                 `protobuf:"bytes,4,opt,name=message_type,json=messageType,proto3" json:"message_type,omitempty"`
	Position           *GPSPosition           `protobuf:"bytes,5,opt,name=position,proto3" json:"position,omitempty"`
	VehicleStatus      *VehicleStatus         `protobuf:"bytes,6,opt,name=vehicle_status,json=vehicleStatus,proto3" json:"vehicle_status,omitempty"`
	BatteryLevel       int32                  `protobuf:"varint,7,opt,name=battery_level,json=batteryLevel,proto3" json:"battery_level,omitempty"`
	Temperature        float32                `protobuf:"fixed32,8,opt,name=temperature,proto3" json:"temperature,omitempty"`
	Odometer           int32                  `protobuf:"varint,9,opt,name=odometer,proto3" json:"odometer,omitempty"`
	FuelLtr            int32                  `protobuf:"varint,10,opt,name=fuel_ltr,json=fuelLtr,proto3" json:"fuel_ltr,omitempty"`
	FuelPct            int32                  `protobuf:"varint,11,opt,name=fuel_pct,json=fuelPct,proto3" json:"fuel_pct,omitempty"`
	FuelGps            int32                  `protobuf:"varint,12,opt,name=fuel_gps,json=fuelGps,proto3" json:"fuel_gps,omitempty"`
	IdentificationId   string                 `protobuf:"bytes,13,opt,name=identification_id,json=identificationId,proto3" json:"identification_id,omitempty"`
	Vin                string                 `protobuf:"bytes,14,opt,name=vin,proto3" json:"vin,omitempty"`
	Rpm                int32                  `protobuf:"varint,15,opt,name=rpm,proto3" json:"rpm,omitempty"`
	CoolantTemperature float32                `protobuf:"fixed32,16,opt,name=coolant_temperature,json=coolantTemperature,proto3" json:"coolant_temperature,omitempty"`
	// Types that are valid to be assigned to RawData:
	//
	//	*DeviceStatus_WanwayPacket
	//	*DeviceStatus_TeltonikaPacket
	//	*DeviceStatus_ConcoxPacket
	//	*DeviceStatus_HowenPacket
	RawData       isDeviceStatus_RawData `protobuf_oneof:"raw_data"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeviceStatus) Reset() {
	*x = DeviceStatus{}
	mi := &file_common_types_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceStatus) ProtoMessage() {}

func (x *DeviceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_common_types_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceStatus.ProtoReflect.Descriptor instead.
func (*DeviceStatus) Descriptor() ([]byte, []int) {
	return file_common_types_proto_rawDescGZIP(), []int{0}
}

func (x *DeviceStatus) GetImei() string {
	if x != nil {
		return x.Imei
	}
	return ""
}

func (x *DeviceStatus) GetDeviceType() DeviceType {
	if x != nil {
		return x.DeviceType
	}
	return DeviceType_TELTONIKA
}

func (x *DeviceStatus) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *DeviceStatus) GetMessageType() string {
	if x != nil {
		return x.MessageType
	}
	return ""
}

func (x *DeviceStatus) GetPosition() *GPSPosition {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *DeviceStatus) GetVehicleStatus() *VehicleStatus {
	if x != nil {
		return x.VehicleStatus
	}
	return nil
}

func (x *DeviceStatus) GetBatteryLevel() int32 {
	if x != nil {
		return x.BatteryLevel
	}
	return 0
}

func (x *DeviceStatus) GetTemperature() float32 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

func (x *DeviceStatus) GetOdometer() int32 {
	if x != nil {
		return x.Odometer
	}
	return 0
}

func (x *DeviceStatus) GetFuelLtr() int32 {
	if x != nil {
		return x.FuelLtr
	}
	return 0
}

func (x *DeviceStatus) GetFuelPct() int32 {
	if x != nil {
		return x.FuelPct
	}
	return 0
}

func (x *DeviceStatus) GetFuelGps() int32 {
	if x != nil {
		return x.FuelGps
	}
	return 0
}

func (x *DeviceStatus) GetIdentificationId() string {
	if x != nil {
		return x.IdentificationId
	}
	return ""
}

func (x *DeviceStatus) GetVin() string {
	if x != nil {
		return x.Vin
	}
	return ""
}

func (x *DeviceStatus) GetRpm() int32 {
	if x != nil {
		return x.Rpm
	}
	return 0
}

func (x *DeviceStatus) GetCoolantTemperature() float32 {
	if x != nil {
		return x.CoolantTemperature
	}
	return 0
}

func (x *DeviceStatus) GetRawData() isDeviceStatus_RawData {
	if x != nil {
		return x.RawData
	}
	return nil
}

func (x *DeviceStatus) GetWanwayPacket() *WanwayPacket {
	if x != nil {
		if x, ok := x.RawData.(*DeviceStatus_WanwayPacket); ok {
			return x.WanwayPacket
		}
	}
	return nil
}

func (x *DeviceStatus) GetTeltonikaPacket() *TeltonikaPacket {
	if x != nil {
		if x, ok := x.RawData.(*DeviceStatus_TeltonikaPacket); ok {
			return x.TeltonikaPacket
		}
	}
	return nil
}

func (x *DeviceStatus) GetConcoxPacket() *ConcoxPacket {
	if x != nil {
		if x, ok := x.RawData.(*DeviceStatus_ConcoxPacket); ok {
			return x.ConcoxPacket
		}
	}
	return nil
}

func (x *DeviceStatus) GetHowenPacket() *HowenPacket {
	if x != nil {
		if x, ok := x.RawData.(*DeviceStatus_HowenPacket); ok {
			return x.HowenPacket
		}
	}
	return nil
}

type isDeviceStatus_RawData interface {
	isDeviceStatus_RawData()
}

type DeviceStatus_WanwayPacket struct {
	WanwayPacket *WanwayPacket `protobuf:"bytes,17,opt,name=wanway_packet,json=wanwayPacket,proto3,oneof"`
}

type DeviceStatus_TeltonikaPacket struct {
	TeltonikaPacket *TeltonikaPacket `protobuf:"bytes,18,opt,name=teltonika_packet,json=teltonikaPacket,proto3,oneof"`
}

type DeviceStatus_ConcoxPacket struct {
	ConcoxPacket *ConcoxPacket `protobuf:"bytes,19,opt,name=concox_packet,json=concoxPacket,proto3,oneof"`
}

type DeviceStatus_HowenPacket struct {
	HowenPacket *HowenPacket `protobuf:"bytes,20,opt,name=howen_packet,json=howenPacket,proto3,oneof"`
}

func (*DeviceStatus_WanwayPacket) isDeviceStatus_RawData() {}

func (*DeviceStatus_TeltonikaPacket) isDeviceStatus_RawData() {}

func (*DeviceStatus_ConcoxPacket) isDeviceStatus_RawData() {}

func (*DeviceStatus_HowenPacket) isDeviceStatus_RawData() {}

type GPSPosition struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Latitude      float32                `protobuf:"fixed32,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude     float32                `protobuf:"fixed32,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Altitude      float32                `protobuf:"fixed32,3,opt,name=altitude,proto3" json:"altitude,omitempty"`
	Speed         *float32               `protobuf:"fixed32,4,opt,name=speed,proto3,oneof" json:"speed,omitempty"`
	Course        float32                `protobuf:"fixed32,5,opt,name=course,proto3" json:"course,omitempty"`
	Satellites    int32                  `protobuf:"varint,6,opt,name=satellites,proto3" json:"satellites,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GPSPosition) Reset() {
	*x = GPSPosition{}
	mi := &file_common_types_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GPSPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPSPosition) ProtoMessage() {}

func (x *GPSPosition) ProtoReflect() protoreflect.Message {
	mi := &file_common_types_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPSPosition.ProtoReflect.Descriptor instead.
func (*GPSPosition) Descriptor() ([]byte, []int) {
	return file_common_types_proto_rawDescGZIP(), []int{1}
}

func (x *GPSPosition) GetLatitude() float32 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *GPSPosition) GetLongitude() float32 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *GPSPosition) GetAltitude() float32 {
	if x != nil {
		return x.Altitude
	}
	return 0
}

func (x *GPSPosition) GetSpeed() float32 {
	if x != nil && x.Speed != nil {
		return *x.Speed
	}
	return 0
}

func (x *GPSPosition) GetCourse() float32 {
	if x != nil {
		return x.Course
	}
	return 0
}

func (x *GPSPosition) GetSatellites() int32 {
	if x != nil {
		return x.Satellites
	}
	return 0
}

type VehicleStatus struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	Ignition               *bool                  `protobuf:"varint,1,opt,name=ignition,proto3,oneof" json:"ignition,omitempty"`
	OverSpeeding           bool                   `protobuf:"varint,2,opt,name=over_speeding,json=overSpeeding,proto3" json:"over_speeding,omitempty"`
	RashDriving            bool                   `protobuf:"varint,3,opt,name=rash_driving,json=rashDriving,proto3" json:"rash_driving,omitempty"`
	CrashDetection         bool                   `protobuf:"varint,4,opt,name=crash_detection,json=crashDetection,proto3" json:"crash_detection,omitempty"`
	UnplugBattery          bool                   `protobuf:"varint,5,opt,name=unplug_battery,json=unplugBattery,proto3" json:"unplug_battery,omitempty"`
	Towing                 bool                   `protobuf:"varint,6,opt,name=towing,proto3" json:"towing,omitempty"`
	AutoGeofence           bool                   `protobuf:"varint,7,opt,name=auto_geofence,json=autoGeofence,proto3" json:"auto_geofence,omitempty"`
	ExcessiveIdling        bool                   `protobuf:"varint,8,opt,name=excessive_idling,json=excessiveIdling,proto3" json:"excessive_idling,omitempty"`
	RouteDeviation         bool                   `protobuf:"varint,9,opt,name=route_deviation,json=routeDeviation,proto3" json:"route_deviation,omitempty"`
	VibrationDetected      bool                   `protobuf:"varint,10,opt,name=vibration_detected,json=vibrationDetected,proto3" json:"vibration_detected,omitempty"`                  // Vibration sensor triggered
	DistanceBetweenObjects bool                   `protobuf:"varint,11,opt,name=distance_between_objects,json=distanceBetweenObjects,proto3" json:"distance_between_objects,omitempty"` // Objects too close
	DriverAbsence          bool                   `protobuf:"varint,12,opt,name=driver_absence,json=driverAbsence,proto3" json:"driver_absence,omitempty"`                              // No driver detected
	DriverChange           bool                   `protobuf:"varint,13,opt,name=driver_change,json=driverChange,proto3" json:"driver_change,omitempty"`                                 // Driver change detected
	DriverDistraction      bool                   `protobuf:"varint,14,opt,name=driver_distraction,json=driverDistraction,proto3" json:"driver_distraction,omitempty"`                  // Driver distraction event
	EntringGeofence        bool                   `protobuf:"varint,15,opt,name=entring_geofence,json=entringGeofence,proto3" json:"entring_geofence,omitempty"`                        // Enter or exit geofence
	ExcessiveDriving       bool                   `protobuf:"varint,16,opt,name=excessive_driving,json=excessiveDriving,proto3" json:"excessive_driving,omitempty"`                     // Excessive driving hours
	ExcessiveParking       bool                   `protobuf:"varint,17,opt,name=excessive_parking,json=excessiveParking,proto3" json:"excessive_parking,omitempty"`                     // Excessive parking detected
	FatigueDriving         bool                   `protobuf:"varint,18,opt,name=fatigue_driving,json=fatigueDriving,proto3" json:"fatigue_driving,omitempty"`                           // Fatigue driving
	FuelRefuel             bool                   `protobuf:"varint,19,opt,name=fuel_refuel,json=fuelRefuel,proto3" json:"fuel_refuel,omitempty"`                                       // Fuel theft or refuel
	TrackerOffline         bool                   `protobuf:"varint,20,opt,name=tracker_offline,json=trackerOffline,proto3" json:"tracker_offline,omitempty"`                           // Tracker switched off or lost
	InputsTriggering       bool                   `protobuf:"varint,21,opt,name=inputs_triggering,json=inputsTriggering,proto3" json:"inputs_triggering,omitempty"`                     // Inputs triggering detected
	OutputsTriggering      bool                   `protobuf:"varint,22,opt,name=outputs_triggering,json=outputsTriggering,proto3" json:"outputs_triggering,omitempty"`                  // Outputs triggering detected
	ParameterInRange       bool                   `protobuf:"varint,23,opt,name=parameter_in_range,json=parameterInRange,proto3" json:"parameter_in_range,omitempty"`                   // Parameter within range
	ParkingState           bool                   `protobuf:"varint,24,opt,name=parking_state,json=parkingState,proto3" json:"parking_state,omitempty"`                                 // Parking state detection
	SosButtonPressed       bool                   `protobuf:"varint,25,opt,name=sos_button_pressed,json=sosButtonPressed,proto3" json:"sos_button_pressed,omitempty"`                   // SOS button event
	StateFieldValueChange  bool                   `protobuf:"varint,27,opt,name=state_field_value_change,json=stateFieldValueChange,proto3" json:"state_field_value_change,omitempty"`  // State field value updated
	TaskStatusChange       bool                   `protobuf:"varint,28,opt,name=task_status_change,json=taskStatusChange,proto3" json:"task_status_change,omitempty"`                   // Task status changed
	ExitingGeofence        bool                   `protobuf:"varint,29,opt,name=exiting_geofence,json=exitingGeofence,proto3" json:"exiting_geofence,omitempty"`
	FuelTheft              bool                   `protobuf:"varint,30,opt,name=fuel_theft,json=fuelTheft,proto3" json:"fuel_theft,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *VehicleStatus) Reset() {
	*x = VehicleStatus{}
	mi := &file_common_types_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VehicleStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VehicleStatus) ProtoMessage() {}

func (x *VehicleStatus) ProtoReflect() protoreflect.Message {
	mi := &file_common_types_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VehicleStatus.ProtoReflect.Descriptor instead.
func (*VehicleStatus) Descriptor() ([]byte, []int) {
	return file_common_types_proto_rawDescGZIP(), []int{2}
}

func (x *VehicleStatus) GetIgnition() bool {
	if x != nil && x.Ignition != nil {
		return *x.Ignition
	}
	return false
}

func (x *VehicleStatus) GetOverSpeeding() bool {
	if x != nil {
		return x.OverSpeeding
	}
	return false
}

func (x *VehicleStatus) GetRashDriving() bool {
	if x != nil {
		return x.RashDriving
	}
	return false
}

func (x *VehicleStatus) GetCrashDetection() bool {
	if x != nil {
		return x.CrashDetection
	}
	return false
}

func (x *VehicleStatus) GetUnplugBattery() bool {
	if x != nil {
		return x.UnplugBattery
	}
	return false
}

func (x *VehicleStatus) GetTowing() bool {
	if x != nil {
		return x.Towing
	}
	return false
}

func (x *VehicleStatus) GetAutoGeofence() bool {
	if x != nil {
		return x.AutoGeofence
	}
	return false
}

func (x *VehicleStatus) GetExcessiveIdling() bool {
	if x != nil {
		return x.ExcessiveIdling
	}
	return false
}

func (x *VehicleStatus) GetRouteDeviation() bool {
	if x != nil {
		return x.RouteDeviation
	}
	return false
}

func (x *VehicleStatus) GetVibrationDetected() bool {
	if x != nil {
		return x.VibrationDetected
	}
	return false
}

func (x *VehicleStatus) GetDistanceBetweenObjects() bool {
	if x != nil {
		return x.DistanceBetweenObjects
	}
	return false
}

func (x *VehicleStatus) GetDriverAbsence() bool {
	if x != nil {
		return x.DriverAbsence
	}
	return false
}

func (x *VehicleStatus) GetDriverChange() bool {
	if x != nil {
		return x.DriverChange
	}
	return false
}

func (x *VehicleStatus) GetDriverDistraction() bool {
	if x != nil {
		return x.DriverDistraction
	}
	return false
}

func (x *VehicleStatus) GetEntringGeofence() bool {
	if x != nil {
		return x.EntringGeofence
	}
	return false
}

func (x *VehicleStatus) GetExcessiveDriving() bool {
	if x != nil {
		return x.ExcessiveDriving
	}
	return false
}

func (x *VehicleStatus) GetExcessiveParking() bool {
	if x != nil {
		return x.ExcessiveParking
	}
	return false
}

func (x *VehicleStatus) GetFatigueDriving() bool {
	if x != nil {
		return x.FatigueDriving
	}
	return false
}

func (x *VehicleStatus) GetFuelRefuel() bool {
	if x != nil {
		return x.FuelRefuel
	}
	return false
}

func (x *VehicleStatus) GetTrackerOffline() bool {
	if x != nil {
		return x.TrackerOffline
	}
	return false
}

func (x *VehicleStatus) GetInputsTriggering() bool {
	if x != nil {
		return x.InputsTriggering
	}
	return false
}

func (x *VehicleStatus) GetOutputsTriggering() bool {
	if x != nil {
		return x.OutputsTriggering
	}
	return false
}

func (x *VehicleStatus) GetParameterInRange() bool {
	if x != nil {
		return x.ParameterInRange
	}
	return false
}

func (x *VehicleStatus) GetParkingState() bool {
	if x != nil {
		return x.ParkingState
	}
	return false
}

func (x *VehicleStatus) GetSosButtonPressed() bool {
	if x != nil {
		return x.SosButtonPressed
	}
	return false
}

func (x *VehicleStatus) GetStateFieldValueChange() bool {
	if x != nil {
		return x.StateFieldValueChange
	}
	return false
}

func (x *VehicleStatus) GetTaskStatusChange() bool {
	if x != nil {
		return x.TaskStatusChange
	}
	return false
}

func (x *VehicleStatus) GetExitingGeofence() bool {
	if x != nil {
		return x.ExitingGeofence
	}
	return false
}

func (x *VehicleStatus) GetFuelTheft() bool {
	if x != nil {
		return x.FuelTheft
	}
	return false
}

type WanwayPacket struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RawData       []byte                 `protobuf:"bytes,1,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WanwayPacket) Reset() {
	*x = WanwayPacket{}
	mi := &file_common_types_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WanwayPacket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WanwayPacket) ProtoMessage() {}

func (x *WanwayPacket) ProtoReflect() protoreflect.Message {
	mi := &file_common_types_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WanwayPacket.ProtoReflect.Descriptor instead.
func (*WanwayPacket) Descriptor() ([]byte, []int) {
	return file_common_types_proto_rawDescGZIP(), []int{3}
}

func (x *WanwayPacket) GetRawData() []byte {
	if x != nil {
		return x.RawData
	}
	return nil
}

type TeltonikaPacket struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RawData       []byte                 `protobuf:"bytes,1,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TeltonikaPacket) Reset() {
	*x = TeltonikaPacket{}
	mi := &file_common_types_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TeltonikaPacket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeltonikaPacket) ProtoMessage() {}

func (x *TeltonikaPacket) ProtoReflect() protoreflect.Message {
	mi := &file_common_types_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeltonikaPacket.ProtoReflect.Descriptor instead.
func (*TeltonikaPacket) Descriptor() ([]byte, []int) {
	return file_common_types_proto_rawDescGZIP(), []int{4}
}

func (x *TeltonikaPacket) GetRawData() []byte {
	if x != nil {
		return x.RawData
	}
	return nil
}

type ConcoxPacket struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RawData       []byte                 `protobuf:"bytes,1,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConcoxPacket) Reset() {
	*x = ConcoxPacket{}
	mi := &file_common_types_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConcoxPacket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConcoxPacket) ProtoMessage() {}

func (x *ConcoxPacket) ProtoReflect() protoreflect.Message {
	mi := &file_common_types_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConcoxPacket.ProtoReflect.Descriptor instead.
func (*ConcoxPacket) Descriptor() ([]byte, []int) {
	return file_common_types_proto_rawDescGZIP(), []int{5}
}

func (x *ConcoxPacket) GetRawData() []byte {
	if x != nil {
		return x.RawData
	}
	return nil
}

type HowenPacket struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RawData       []byte                 `protobuf:"bytes,1,opt,name=raw_data,json=rawData,proto3" json:"raw_data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HowenPacket) Reset() {
	*x = HowenPacket{}
	mi := &file_common_types_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HowenPacket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HowenPacket) ProtoMessage() {}

func (x *HowenPacket) ProtoReflect() protoreflect.Message {
	mi := &file_common_types_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HowenPacket.ProtoReflect.Descriptor instead.
func (*HowenPacket) Descriptor() ([]byte, []int) {
	return file_common_types_proto_rawDescGZIP(), []int{6}
}

func (x *HowenPacket) GetRawData() []byte {
	if x != nil {
		return x.RawData
	}
	return nil
}

type DeviceResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Imei          string                 `protobuf:"bytes,1,opt,name=imei,proto3" json:"imei,omitempty"`
	Response      string                 `protobuf:"bytes,2,opt,name=response,proto3" json:"response,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeviceResponse) Reset() {
	*x = DeviceResponse{}
	mi := &file_common_types_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceResponse) ProtoMessage() {}

func (x *DeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_common_types_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceResponse.ProtoReflect.Descriptor instead.
func (*DeviceResponse) Descriptor() ([]byte, []int) {
	return file_common_types_proto_rawDescGZIP(), []int{7}
}

func (x *DeviceResponse) GetImei() string {
	if x != nil {
		return x.Imei
	}
	return ""
}

func (x *DeviceResponse) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

type FetchDeviceModelRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Imei          string                 `protobuf:"bytes,1,opt,name=imei,proto3" json:"imei,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FetchDeviceModelRequest) Reset() {
	*x = FetchDeviceModelRequest{}
	mi := &file_common_types_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchDeviceModelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchDeviceModelRequest) ProtoMessage() {}

func (x *FetchDeviceModelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_common_types_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchDeviceModelRequest.ProtoReflect.Descriptor instead.
func (*FetchDeviceModelRequest) Descriptor() ([]byte, []int) {
	return file_common_types_proto_rawDescGZIP(), []int{8}
}

func (x *FetchDeviceModelRequest) GetImei() string {
	if x != nil {
		return x.Imei
	}
	return ""
}

type FetchDeviceModelResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Model         string                 `protobuf:"bytes,1,opt,name=model,proto3" json:"model,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FetchDeviceModelResponse) Reset() {
	*x = FetchDeviceModelResponse{}
	mi := &file_common_types_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchDeviceModelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchDeviceModelResponse) ProtoMessage() {}

func (x *FetchDeviceModelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_common_types_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchDeviceModelResponse.ProtoReflect.Descriptor instead.
func (*FetchDeviceModelResponse) Descriptor() ([]byte, []int) {
	return file_common_types_proto_rawDescGZIP(), []int{9}
}

func (x *FetchDeviceModelResponse) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

var File_common_types_proto protoreflect.FileDescriptor

var file_common_types_proto_rawDesc = []byte{
	0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd8, 0x06, 0x0a,
	0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x69, 0x6d, 0x65, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6d, 0x65,
	0x69, 0x12, 0x32, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x47, 0x50, 0x53,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0e, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x0d, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x64, 0x6f, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6f, 0x64, 0x6f, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x75, 0x65, 0x6c, 0x5f, 0x6c, 0x74, 0x72, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x66, 0x75, 0x65, 0x6c, 0x4c, 0x74, 0x72, 0x12, 0x19, 0x0a,
	0x08, 0x66, 0x75, 0x65, 0x6c, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x66, 0x75, 0x65, 0x6c, 0x50, 0x63, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x75, 0x65, 0x6c,
	0x5f, 0x67, 0x70, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x66, 0x75, 0x65, 0x6c,
	0x47, 0x70, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x76, 0x69, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x76,
	0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x70, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x72, 0x70, 0x6d, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6f, 0x6c, 0x61, 0x6e, 0x74, 0x5f,
	0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x12, 0x63, 0x6f, 0x6f, 0x6c, 0x61, 0x6e, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x3a, 0x0a, 0x0d, 0x77, 0x61, 0x6e, 0x77, 0x61, 0x79, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x57, 0x61, 0x6e, 0x77, 0x61, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x48, 0x00, 0x52, 0x0c, 0x77, 0x61, 0x6e, 0x77, 0x61, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x12, 0x43, 0x0a, 0x10, 0x74, 0x65, 0x6c, 0x74, 0x6f, 0x6e, 0x69, 0x6b, 0x61, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x54, 0x65, 0x6c, 0x74, 0x6f, 0x6e, 0x69, 0x6b, 0x61, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x74, 0x65, 0x6c, 0x74, 0x6f, 0x6e, 0x69, 0x6b, 0x61,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x3a, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x78,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x6f, 0x78, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x63, 0x6f, 0x78, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x12, 0x37, 0x0a, 0x0c, 0x68, 0x6f, 0x77, 0x65, 0x6e, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x48, 0x6f, 0x77, 0x65, 0x6e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0b,
	0x68, 0x6f, 0x77, 0x65, 0x6e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x72,
	0x61, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc0, 0x01, 0x0a, 0x0b, 0x47, 0x50, 0x53, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x19, 0x0a,
	0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x05,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x73,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x22, 0xd0, 0x09, 0x0a, 0x0d, 0x56,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x08,
	0x69, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x08, 0x69, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a,
	0x0d, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6f, 0x76, 0x65, 0x72, 0x53, 0x70, 0x65, 0x65, 0x64, 0x69,
	0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x61, 0x73, 0x68, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x69,
	0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x72, 0x61, 0x73, 0x68, 0x44, 0x72,
	0x69, 0x76, 0x69, 0x6e, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x72, 0x61, 0x73, 0x68, 0x5f, 0x64,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x63, 0x72, 0x61, 0x73, 0x68, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25,
	0x0a, 0x0e, 0x75, 0x6e, 0x70, 0x6c, 0x75, 0x67, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x75, 0x6e, 0x70, 0x6c, 0x75, 0x67, 0x42, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x74, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a,
	0x0d, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x67, 0x65, 0x6f, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x6f, 0x47, 0x65, 0x6f, 0x66, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x78, 0x63, 0x65, 0x73, 0x73, 0x69, 0x76, 0x65, 0x5f,
	0x69, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x65, 0x78,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x76, 0x65, 0x49, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x27, 0x0a,
	0x0f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x44, 0x65, 0x76,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x76, 0x69, 0x62, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x11, 0x76, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x62, 0x73, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x41,
	0x62, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x64,
	0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x44,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x6e,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x67, 0x65, 0x6f, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x47, 0x65, 0x6f,
	0x66, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x78, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x76, 0x65, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x65, 0x78, 0x63, 0x65, 0x73, 0x73, 0x69, 0x76, 0x65, 0x44, 0x72, 0x69, 0x76, 0x69,
	0x6e, 0x67, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x78, 0x63, 0x65, 0x73, 0x73, 0x69, 0x76, 0x65, 0x5f,
	0x70, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x65,
	0x78, 0x63, 0x65, 0x73, 0x73, 0x69, 0x76, 0x65, 0x50, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x12,
	0x27, 0x0a, 0x0f, 0x66, 0x61, 0x74, 0x69, 0x67, 0x75, 0x65, 0x5f, 0x64, 0x72, 0x69, 0x76, 0x69,
	0x6e, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x66, 0x61, 0x74, 0x69, 0x67, 0x75,
	0x65, 0x44, 0x72, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x75, 0x65, 0x6c,
	0x5f, 0x72, 0x65, 0x66, 0x75, 0x65, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x66,
	0x75, 0x65, 0x6c, 0x52, 0x65, 0x66, 0x75, 0x65, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x5f, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x73, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x2d, 0x0a, 0x12, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x73, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x2c,
	0x0a, 0x12, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x5f, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x70, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x6f, 0x73, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73,
	0x6f, 0x73, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12,
	0x37, 0x0a, 0x18, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x15, 0x73, 0x74, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x78, 0x69, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x67, 0x65, 0x6f, 0x66, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x65, 0x78, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x47, 0x65, 0x6f, 0x66, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x75, 0x65, 0x6c, 0x5f, 0x74, 0x68, 0x65, 0x66, 0x74, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x66, 0x75, 0x65, 0x6c, 0x54, 0x68, 0x65, 0x66, 0x74,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x29, 0x0a,
	0x0c, 0x57, 0x61, 0x6e, 0x77, 0x61, 0x79, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x22, 0x2c, 0x0a, 0x0f, 0x54, 0x65, 0x6c, 0x74,
	0x6f, 0x6e, 0x69, 0x6b, 0x61, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x72,
	0x61, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x72,
	0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x22, 0x29, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x63, 0x6f, 0x78,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74,
	0x61, 0x22, 0x28, 0x0a, 0x0b, 0x48, 0x6f, 0x77, 0x65, 0x6e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x72, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x22, 0x40, 0x0a, 0x0e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x69, 0x6d, 0x65, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6d, 0x65,
	0x69, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x0a,
	0x17, 0x46, 0x65, 0x74, 0x63, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6d, 0x65, 0x69,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6d, 0x65, 0x69, 0x22, 0x30, 0x0a, 0x18,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2a, 0x3e,
	0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09,
	0x54, 0x45, 0x4c, 0x54, 0x4f, 0x4e, 0x49, 0x4b, 0x41, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x57,
	0x41, 0x4e, 0x57, 0x41, 0x59, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4f, 0x4e, 0x43, 0x4f,
	0x58, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x48, 0x4f, 0x57, 0x45, 0x4e, 0x10, 0x03, 0x2a, 0x41,
	0x0a, 0x12, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x4d, 0x31, 0x32, 0x30, 0x30, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x47, 0x54, 0x30, 0x36, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x52,
	0x30, 0x36, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x4f, 0x57, 0x45, 0x4e, 0x57, 0x53, 0x10,
	0x03, 0x42, 0x37, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x34, 0x30, 0x34, 0x6d, 0x69, 0x6e, 0x64, 0x73, 0x2f, 0x61, 0x76, 0x6c, 0x2d, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x3b, 0x74, 0x79, 0x70, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_common_types_proto_rawDescOnce sync.Once
	file_common_types_proto_rawDescData = file_common_types_proto_rawDesc
)

func file_common_types_proto_rawDescGZIP() []byte {
	file_common_types_proto_rawDescOnce.Do(func() {
		file_common_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_common_types_proto_rawDescData)
	})
	return file_common_types_proto_rawDescData
}

var file_common_types_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_common_types_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_common_types_proto_goTypes = []any{
	(DeviceType)(0),                  // 0: types.DeviceType
	(DeviceProtocolType)(0),          // 1: types.DeviceProtocolType
	(*DeviceStatus)(nil),             // 2: types.DeviceStatus
	(*GPSPosition)(nil),              // 3: types.GPSPosition
	(*VehicleStatus)(nil),            // 4: types.VehicleStatus
	(*WanwayPacket)(nil),             // 5: types.WanwayPacket
	(*TeltonikaPacket)(nil),          // 6: types.TeltonikaPacket
	(*ConcoxPacket)(nil),             // 7: types.ConcoxPacket
	(*HowenPacket)(nil),              // 8: types.HowenPacket
	(*DeviceResponse)(nil),           // 9: types.DeviceResponse
	(*FetchDeviceModelRequest)(nil),  // 10: types.FetchDeviceModelRequest
	(*FetchDeviceModelResponse)(nil), // 11: types.FetchDeviceModelResponse
	(*timestamppb.Timestamp)(nil),    // 12: google.protobuf.Timestamp
}
var file_common_types_proto_depIdxs = []int32{
	0,  // 0: types.DeviceStatus.device_type:type_name -> types.DeviceType
	12, // 1: types.DeviceStatus.timestamp:type_name -> google.protobuf.Timestamp
	3,  // 2: types.DeviceStatus.position:type_name -> types.GPSPosition
	4,  // 3: types.DeviceStatus.vehicle_status:type_name -> types.VehicleStatus
	5,  // 4: types.DeviceStatus.wanway_packet:type_name -> types.WanwayPacket
	6,  // 5: types.DeviceStatus.teltonika_packet:type_name -> types.TeltonikaPacket
	7,  // 6: types.DeviceStatus.concox_packet:type_name -> types.ConcoxPacket
	8,  // 7: types.DeviceStatus.howen_packet:type_name -> types.HowenPacket
	8,  // [8:8] is the sub-list for method output_type
	8,  // [8:8] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_common_types_proto_init() }
func file_common_types_proto_init() {
	if File_common_types_proto != nil {
		return
	}
	file_common_types_proto_msgTypes[0].OneofWrappers = []any{
		(*DeviceStatus_WanwayPacket)(nil),
		(*DeviceStatus_TeltonikaPacket)(nil),
		(*DeviceStatus_ConcoxPacket)(nil),
		(*DeviceStatus_HowenPacket)(nil),
	}
	file_common_types_proto_msgTypes[1].OneofWrappers = []any{}
	file_common_types_proto_msgTypes[2].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_common_types_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_common_types_proto_goTypes,
		DependencyIndexes: file_common_types_proto_depIdxs,
		EnumInfos:         file_common_types_proto_enumTypes,
		MessageInfos:      file_common_types_proto_msgTypes,
	}.Build()
	File_common_types_proto = out.File
	file_common_types_proto_rawDesc = nil
	file_common_types_proto_goTypes = nil
	file_common_types_proto_depIdxs = nil
}
